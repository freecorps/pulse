name: Next.js Build Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  pull-requests: write
  contents: read
  checks: write

jobs:
  build:
    name: Build Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.5.0'

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
        env:
          BUN_AUTH_TOKEN: ${{ secrets.BUN_AUTH_TOKEN }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Restore next build cache
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/bun.lockb') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/bun.lockb') }}-

      - name: Create Build Status Check
        uses: actions/github-script@v6
        id: check
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: check } = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Next.js Build Status',
              head_sha: context.payload.pull_request.head.sha,
              status: 'in_progress',
              started_at: new Date(),
            });
            return check.id;

      - name: Build with Next.js
        id: build
        run: bun run build

      - name: Update Status Check (Success)
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const checkId = ${{ steps.check.outputs.result }};
            await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: checkId,
              status: 'completed',
              conclusion: 'success',
              completed_at: new Date(),
              output: {
                title: 'Build passou com sucesso',
                summary: '✅ Next.js build completou com sucesso'
              }
            });

      - name: Update Status Check (Failure)
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const checkId = ${{ steps.check.outputs.result }};
            await github.rest.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: checkId,
              status: 'completed',
              conclusion: 'failure',
              completed_at: new Date(),
              output: {
                title: 'Build falhou',
                summary: '❌ Next.js build falhou. Por favor, verifique os logs da action para mais detalhes.'
              }
            });
